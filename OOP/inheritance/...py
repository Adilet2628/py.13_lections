"""Создайте класс Auto в нем реализуйте метод ride который выводит сообщение Riding on a ground, создайте класс Boat реализуйте метод swim, который выводит floating on water.
Создайте класс Amphibian который наследуется от класса Auto и Boat. Создайте от него объект и вызовите все методы.
"""
# class Auto:
#     def ride(self):
#         print('Riding on a ground')
# class Boat:
#     def swim(self):
#         print('floating on water')

# class Amphibian(Auto,Boat):
#     def ass(self):

"""Создайте класс RadioMixin в нем реализуйте метод для проигрывания музыки play_music который принимает в себя название песни. Создайте класс Auto, Boat, Amphibian и расширьте функционал этих классов при помощи миксина"""

"""Будильник
Создайте класс Clock, у которого будет метод показывающий текущее время и класс Alarm, с методами для включения и выключения будильника.
Далее создайте класс AlarmClock, который наследуется от двух предыдущих классов. Добавьте к
нему метод для установки будильника, при вызове которого должен включатся будильник."""

"""Разработчики
Напишите класс Coder с атрибутами experience, count_code_time = 0 и абстрактными методами
get_info и coding.
Создайте классы Backend и Frontend, которые наследуют все атрибуты и методы от класса Coder. Класс Backend должен принимать дополнительно параметр languages_backend, а Frontend — languages_frontend соответственно.
Переопределите в обоих классах методы get_info и coding (так, чтобы он принимал количество часов кодинга и при каждом вызове этого метода добавлял это значение к count_code_time). 
Так же бывают FullStack разработчики и
поэтому создайте данный класс и чтобы у него были атрибуты и методы предыдущих классов. Создайте несколько экземпляров от классов Backend, Frontend, FullStack и вызовите их методы."""
\


# =============================================================================================================================


# Создайте класс BankAccount, у которого должны быть:
#         переменные объекта
#             balance (со значением 0 по умолчанию)
#             account_id (со значением random.randrange(100000,199999))
#             transactions_history (c пустым словарем)
#         методы
#             withdraw (снять) принимает сумму, которую нужно снять с баланса и возвращает остаток баланса после снятия
#             deposit (положить) принимает сумму, которую нужно положить на баланс и возвращает остаток баланса после пополнения
#         После создания методов и переменных, попробуйте создать счет, пополнить баланс и снять деньги с баланса.
#     В созданный класс BankAccount добавьте методы:
#         receive (принять) который принимает сумму, увеличивает свой баланс, записывает счет отправителя в словарь transactions_history в качестве ключа, и сумму добавляет в список, который является значением. Почему список? Потому что переводов от данного банковского счета может быть много (пока дату перевода не будем записывать).
#         transfer (перевести), который принимает сумму и другой экземпляр класса BankAccount (параметр назовём receiving_account), на который нужно перевести деньги. В результате работы этого метода нужно уменьшить сумму на балансе, вызвать метод receive у receiving_account. Метод должен возвращать остаток денег на балансе после перевода.
#         После реализации этих методов, попробуйте создать несколько счетов, попробуйте совершить несколько денежных переводов.

# from random import randrange
# class BankAccount:
#     def __init__ (self):
#         self.balance = 0
#         self.account_id = random.randrange(100000,199999)
#         self.transactions_history = {}
#     def withdraw(self,a):
#         self.balance -= a
#         return self.balance
#     def deposit(self,b):
#         self.balanse+= b
#         return self.balanse
# ak = BankAccount()
# print(ak.deposit(100))



